#!/bin/sh
#

# PROVIDE: kevoree
# REQUIRE: LOGIN
# KEYWORD: shutdown

#
# Configuration settings for kevoree in /etc/rc.conf:
#
# kevoree_enable (bool):
#   Set to "NO" by default.
#   Set it to "YES" to enable kevoree
#
# kevoree_home (str):
#   Default to "$HOME/kevoree-service"
#   Base kevoree directory
#
# 

. /etc/rc.subr

name="kevoree"
rcvar=`set_rcvar`
pidfile="/var/run/kevoree.pid"

load_rc_config "${name}"


: ${kevoree_enable="NO"}
: ${kevoree_home="$HOME/kevoree-service"}

#APP_PATH="$HOME/kevoree-service" # path where your exec file are
SERVICE="kevoree-runtime"  # name of the exec file without (.jar)
JAVA="/usr/local/bin/java"
SERVICE_UPDATER="kevoree-service-updater"

java_command="/usr/local/bin/java -Dnode.log.level=DEBUG -Dnode.name=`/bin/hostname` -Dnode.groupType=RestGroup -Dnode.update.timeout=300000 -Xmx1024M -Xms1024M -jar $kevoree_home/$SERVICE.jar  2>&1 > $kevoree_home/`/bin/hostname`.log"


start_precmd="pid_touch"
start_cmd="kevoree_start"
stop_cmd="kevoree_stop"
status_cmd="kevoree_status"

pid_touch() {
    touch ${pidfile}
}

kevoree_update() {
	$JAVA -jar "$kevoree_home/$SERVICE_UPDATER.jar" "$kevoree_home/$SERVICE.jar"
}

kevoree_start() {
	echo "updating $name."
	kevoree_update
    echo "Starting $name."
    exec ${java_command}
}

kevoree_stop() {
    rc_pid=$(kevoree_check_pidfile ${pidfile})

    if [ -z "${rc_pid}" ]; then
        [ -n "${rc_fast}" ] && return 0
        echo "${name} not running? (check ${pidfile})."
        return 1
    fi

    echo "Stopping ${name}."
    kill -KILL ${rc_pid} 2> /dev/null && echo "Killed."
    rm -f ${pidfile}
}

kevoree_status() {
    rc_pid=$(kevoree_check_pidfile $pidfile)

    if [ -n "${rc_pid}" ]; then
        echo "${name} is running as pid ${rc_pid}."
    else
        echo "${name} is not running."
        return 1
    fi
}

kevoree_check_pidfile() {
    _pidfile=$1
    if [ -z "${_pidfile}" ]; then
        err 3 'USAGE: kevoree_check_pidfile pidfile'
    fi
    if [ ! -f ${_pidfile} ]; then
        debug "pid file (${_pidfile}): not readable."
        return
    fi
    read _pid _junk < ${_pidfile}
    if [ -z "${_pid}" ]; then
        debug "pid file (${_pidfile}): no pid in file."
        return
    fi
    if [ -n "`/usr/local/bin/jps -l | grep -e "^${_pid} ${java_class}\$"`" ]; then
        echo -n ${_pid}
    fi
}

run_rc_command "$1"

