# KevScript grammar

# Rules
# =====
KevScript           <- ws *Statement

# 
Statement           <= ws (Add
                         | Remove
                         | Move
                         | Attach
                         | Detach
                         | Set
                         | AddBinding
                         | DelBinding
                         | Network
                         | AddRepo
                         | Start
                         | Stop
                         | ValDecl
                         | ForDecl
                         | ForAllDecl) ws

# val foo = "bar"
# val baz = ["well"]
ValDecl             <- ValToken fs ValIdentifier s :'=' ws (StringLit | Name | InstanceArray | StringArray)

# for foo { set logLevel 'DEBUG' }

ForDecl             <- ForToken fs Identifier ws :'{' ws *ScopeStatement :'}'

# forAll @nodes { /* something */ }
ForAllDecl          <- ForAllToken fs (Identifier | InstanceArray) ws :'{' ws *ScopeStatement :'}'

# 
ScopeStatement      <= ws (Add
                         | ValDecl
                         | ScopeSet
                         | ScopeAttach
                         | ScopeDetach
                         | ScopeSet
                         | ScopeNetwork) ws

# add group0, group1 : WebSocketGroup
Add                 <- AddToken fs IdentifierList fs TypeDef
                     | AddToken fs IdentifierList s :':' s TypeDef

# remove node0, node0.comp1, sync
Remove              <- RemoveToken fs IdentifierList

# move node0.comp0, node2.* node1
Move                <- MoveToken fs IdentifierList s IdentifierList

# attach node0, node1 group0
Attach              <- AttachToken fs IdentifierList s IdentifierList

# attach group0
ScopeAttach         <- AttachToken fs IdentifierList

# detach node0, node1 group0
Detach              <- DetachToken fs IdentifierList s IdentifierList

# detach group0
ScopeDetach         <- DetachToken fs IdentifierList


# set node0 logLevel 'INFO'
# set @nodes logLevel 'DEBUG'
# set 
Set                 <- SetToken fs IdentifierList fs Attribute fs (StringLit | :'@' ValIdentifier)

# set myAtt = 'foo'
# set myAtt/node0 = "foo"
ScopeSet            <- SetToken fs Attribute fs (StringLit | :'@' ValIdentifier)

# network node1 lan.eth0 192.168.0.1
Network             <- NetworkToken fs IdentifierList fs NetworkInfo :'.' NetworkProperty fs Address

# network lan.eth0 192.168.0.1
ScopeNetwork        <- NetworkToken fs NetworkInfo :'.' NetworkProperty fs Address


NetworkInfo         <- +[a-zA-Z0-9_]
NetworkProperty     <- +[a-zA-Z0-9_]

# bind node1.comp0.sendMsg chan42
AddBinding          <- BindToken fs IdentifierList fs Port fs IdentifierList

# unbind node1.comp0.sendMsg chan0
DelBinding          <- UnbindToken fs IdentifierList s IdentifierList

# repo "http://org.sonatype.org/foo/bar?a=b&c=d"
AddRepo             <- RepoToken fs RealStringNoNewLine

# foo
# @bar
Identifier          <= (Name | :'@' ValIdentifier) ?(:'.' Name)

Attribute           <- Name ?(:'/' Identifier)

Port                <- Name

# foo
# foo, %bar%, @baz
IdentifierList      <- Identifier *(:[,] ws Identifier)

# FooType/0.0.1      (std library & specific vers.)
# FooType            (std library & last vers.)
# kevoree.Foo/0.42.0 (specific namespace & specific version)
TypeDef             <- ?(Namespace :'.') TypeName ?(:'/' Version)

TypeName            <- +[a-zA-Z0-9]

Namespace           <- +[a-zA-Z]*([a-zA-Z0-9_])

# start host.child
Start               <- StartToken fs IdentifierList                                                   

# stop foo, bar
Stop                <- StopToken fs IdentifierList                                                  

# node0
# %ctxVar%
# %%randomVar%%
Name                <= +[a-zA-Z0-9_] | ContextVar | RandomVar

ContextVar          <- :'%' +[a-zA-Z0-9_] :'%'

RandomVar           <- :'%%' +[a-zA-Z0-9_] :'%%'

Wildcard            <- '*'

# [ foo, bar, baz ]
InstanceArray       <- :'[' ws Name *(ws :',' ws Name) ws :']'

# [ 'foo', "bar", 'baz' ]
StringArray         <- :'[' ws StringLit *(ws :',' ws StringLit) ws :']'

StringLit           <- :["] *(!["] !eol (DoubleEscapedChar | !DoubleEscapedChar .)) :["]
                     | :['] *(!['] !eol (SingleEscapedChar | !SingleEscapedChar .)) :[']
                     | :[`] *(![`]      (BackEscapedChar   | !BackEscapedChar   .)) :[`]

String              <= +[a-zA-Z0-9_-]

Address             <- :["] +(!["] !eol !DoubleEscapedChar [a-zA-Z0-9.:%@_-]) :["]
                     | :['] +(!['] !eol !SingleEscapedChar [a-zA-Z0-9.:%@_-]) :[']

Version             <- +[a-zA-Z0-9._-]

ValIdentifier       <- +[a-zA-Z_] *[a-zA-Z0-9_]

SingleQuoteLine     <- +(!['] ![\\] (!eol .))
DoubleQuoteLine     <- +(!["] ![\\] (!eol .))

RealStringNoNewLine <- :['] *([\\](!eol .) | !['] ![\\] (!eol [a-zA-Z0-9_])) :[']
                     | :["] *([\\](!eol .) | !["] ![\\] (!eol [a-zA-Z0-9_])) :["]

SingleEscapedChar   <- '\\' ('b' | 'n' | 'r' | 't' | 'v' | '\\' | ('\r\n' | '\n' | '\r') | ['])
DoubleEscapedChar   <- '\\' ('b' | 'n' | 'r' | 't' | 'v' | '\\' | ('\r\n' | '\n' | '\r') | ["])
BackEscapedChar     <- '\\' ('b' | 'n' | 'r' | 't' | 'v' | '\\' | ('\r\n' | '\n' | '\r') | [`])

# Void
# =============
ValToken        <: 'val'
ForToken        <: 'for'
ForAllToken     <: 'forAll'
RepoToken       <: 'repo'
AddToken        <: 'add'
RemoveToken     <: 'remove'
MoveToken       <: 'move'
SetToken        <: 'set'
AttachToken     <: 'attach'
DetachToken     <: 'detach'
NetworkToken    <: 'net'
BindToken       <: 'bind'
UnbindToken     <: 'unbind'
StartToken      <: 'start'
StopToken       <: 'stop'
SComment        <: '//' *(!eol .) (eol | !.)
MComment        <: '/*' *(MComment | !'*/' . ) '*/'
eol             <: '\r\n' | '\n' | '\r'
ws              <: *([ \t] | eol | SComment | MComment)
s               <: *[ \t]
fs              <: +[ \t]
# =================
