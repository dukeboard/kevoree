/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.kevoree.tools.model2code

import japa.parser.JavaParser
import japa.parser.ast.CompilationUnit
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.FileWriter
import java.io.PrintWriter
import java.net.URI
import org.kevoree.ComponentType
import org.kevoree.ContainerRoot
import scala.collection.JavaConversions._

class Model2Code {

  def modelToCode(model : ContainerRoot, componentType : ComponentType, srcRoot : URI) {
    modelToCode(model, componentType, srcRoot, srcRoot)
  }
  
  def modelToCode(model : ContainerRoot, componentType : ComponentType, srcRoot : URI, targetRoot : URI) {
    
    var fileSrcLocation = srcRoot.toString + componentType.getBean.replace(".", "/").concat(".java")
    var fileSrcLocationUri = new URI(fileSrcLocation)
    
    var fileTargetLocation = targetRoot.toString + componentType.getBean.replace(".", "/").concat(".java")
    var fileTargetLocationUri = new URI(fileTargetLocation)
    
    //Load CU
    var compilationUnit = compilationUnitLoader(fileSrcLocationUri)
    
    if(compilationUnit != null) {
    
      var ctw = new ComponentTypeWorker(model, componentType, compilationUnit)
      ctw.synchronize
      
      //Save CU
      compilationUnitWriter(compilationUnit, fileTargetLocationUri)
      
    }
    
  }

  def modelToDeployUnit(model : ContainerRoot, deployUnitRoot : URI) {
   
    val srcLocation = deployUnitRoot.toString + "/src/main/java/"
    val srcLocationUri = new URI(srcLocation)
    var srcFolder = new File(srcLocationUri)
    if(!srcFolder.exists) {
      srcFolder.mkdirs
    }

    generatePom(model, deployUnitRoot)

    model.getTypeDefinitions.filter(typeDef => typeDef.isInstanceOf[ComponentType]).foreach { componentType =>
      System.out.println("Model2Code on " + componentType.getBean)

      var outputFolder = new File("target/test-classes/generated")

      modelToCode(model, componentType.asInstanceOf[ComponentType], srcLocationUri)

      System.out.println("Model2Code done for " + componentType.getBean)
    }
  }

  private def generatePom(model : ContainerRoot, deployUnitRoot : URI) {

    val pomLocation = deployUnitRoot.toString + "/pom.xml"
    val pomLocationUri = new URI(pomLocation)
    var pomFile = new File(pomLocationUri)
    if(!pomFile.exists) {
      pomFile.createNewFile
    }

    var pr = new PrintWriter(new FileOutputStream(pomFile))

    pr.println("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">")
    pr.println("");
    pr.println("  <modelVersion>4.0.0</modelVersion>")
    pr.println("  <groupId>"+model.getDeployUnits.head.getGroupName+"</groupId>")
    pr.println("  <artifactId>"+model.getDeployUnits.head.getUnitName+"</artifactId>")
    pr.println("  <version>"+model.getDeployUnits.head.getVersion+"</version>")
    pr.println("  <name>"+model.getDeployUnits.head.getUnitName+" Generated by Kevoree</name>")

    generateDependencies(model, pr)

    generateBuild(model, pr)

    generateRepositories(model, pr)

    pr.println("</project>")

    pr.flush
    pr.close
    
  }

  private def generateDependencies(model : ContainerRoot, pr : PrintWriter) {
    pr.println("")
    pr.println("  <dependencies>")
    pr.println("    <dependency>")
    pr.println("      <groupId>org.kevoree.tools</groupId>")
    pr.println("      <artifactId>org.kevoree.tools.annotation.api</artifactId>")
    pr.println("      <version>1.1.0-BETA1</version>")
    pr.println("      <scope>compile</scope>")
    pr.println("    </dependency>")

    model.getDeployUnits.filter({du => du.getUrl != null && !du.getUrl.equals("")}).foreach {du =>
      val duVals = du.getUrl.split(":").last.split("/").toArray

      pr.println("    <dependency>")
      pr.println("      <groupId>"+duVals(0)+"</groupId>")
      pr.println("      <artifactId>"+duVals(1)+"</artifactId>")
      if(duVals(2) != null) {
        pr.println("      <version>"+duVals(2)+"</version>")
      }
      pr.println("      <scope>provided</scope>")
      pr.println("    </dependency>")
    }

    pr.println("  </dependencies>")
    pr.println("")
  }

  private def generateRepositories(model : ContainerRoot, pr : PrintWriter) {
    pr.println("")
    pr.println("  <repositories>")
    model.getRepositories.foreach{repo =>
      pr.println("    <repository>")
      pr.println("      <id>"+repo.getUrl+"</id>")
      pr.println("      <name>"+repo.getUrl+"</name>")
      pr.println("      <url>"+repo.getUrl+"</url>")
      pr.println("      <releases><enabled>true</enabled></releases>")
      pr.println("      <snapshots><enabled>true</enabled></snapshots>")
      pr.println("    </repository>")
    }
    pr.println("  </repositories> ")
    pr.println("")
    pr.println("  <pluginRepositories>")
    pr.println("    <pluginRepository>")
    pr.println("      <id>kevoree-plugin-release</id>")
    pr.println("      <url>http://maven.kevoree.org/release</url>")
    pr.println("    </pluginRepository>")
    pr.println("  </pluginRepositories>")
    pr.println("")
  }

  private def generateBuild(model : ContainerRoot, pr : PrintWriter) {
    pr.println("")
    pr.println("  <build>")
    pr.println("    <plugins>")
    pr.println("      <plugin>")
    pr.println("        <groupId>org.kevoree.tools</groupId>")
    pr.println("        <artifactId>org.kevoree.tools.annotation.mavenplugin</artifactId>")
    pr.println("        <version>1.1.0-BETA1</version>")
    pr.println("        <extensions>true</extensions>")
    pr.println("        <configuration>")
    pr.println("          <nodeTypeNames>JavaSENode</nodeTypeNames>")
    pr.println("        </configuration>")
    pr.println("        <executions>")
    pr.println("          <execution>")
    pr.println("            <goals>")
    pr.println("              <goal>generate</goal>")
    pr.println("              <goal>compile</goal>")
    pr.println("            </goals>")
    pr.println("          </execution>")
    pr.println("        </executions>")
    pr.println("      </plugin>")
    pr.println("      <plugin>")
    pr.println("        <groupId>org.apache.felix</groupId>")
    pr.println("        <artifactId>maven-bundle-plugin</artifactId>")
    pr.println("        <version>2.1.0</version>")
    pr.println("        <extensions>true</extensions>")
    pr.println("      </plugin>")
    pr.println("      <plugin>")
    pr.println("        <groupId>org.apache.maven.plugins</groupId>")
    pr.println("        <artifactId>maven-compiler-plugin</artifactId>")
    pr.println("        <version>2.3.2</version>")
    pr.println("        <configuration>")
    pr.println("          <source>1.6</source>")
    pr.println("          <target>1.6</target>")
    pr.println("          <encoding>${project.build.sourceEncoding}</encoding>")
    pr.println("        </configuration>")
    pr.println("      </plugin>")
    pr.println("    </plugins>")
    pr.println("  </build>")
    pr.println("")
  }
  
  private def compilationUnitLoader(fileLocation : URI) = {
    var file = new File(fileLocation)
    if(!file.exists) {
      new CompilationUnit
    } else {
      var in = new FileInputStream(file)
      var cu = JavaParser.parse(in)
      cu
    }
  }
  
  private def compilationUnitWriter(cu : CompilationUnit, fileLocation : URI) = {
        
    var file = new File(fileLocation)
    if(!file.exists) {
      var folders = new File(new URI(fileLocation.toString.substring(0, fileLocation.toString.lastIndexOf("/"))))
      folders.mkdirs
      file.createNewFile
    }
            
    var out = new FileOutputStream(file)
    var br = new PrintWriter(out)
            
    br.print(cu.toString)
    br.flush
    br.close
    out.close
  }
  
}
