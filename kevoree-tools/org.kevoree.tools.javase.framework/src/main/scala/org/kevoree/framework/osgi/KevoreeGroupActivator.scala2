/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kevoree.framework.osgi

/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.kevoree.framework._

abstract class KevoreeGroupActivator extends KevoreeInstanceActivator {

  def callFactory(): KevoreeGroup

  var nodeName: String = ""
  var instanceName: String = ""
  var groupActor: KevoreeGroup = null

  def setNodeName(n : String) {
    nodeName = n
  }
  def setInstanceName(in : String){
    instanceName = in
  }

  override def start() {
    groupActor = callFactory()
    groupActor.asInstanceOf[AbstractTypeDefinition].setName(instanceName)
    groupActor.asInstanceOf[AbstractTypeDefinition].setNodeName(nodeName)
    groupActor.asInstanceOf[AbstractTypeDefinition].setModelService(modelHandlerService)
    groupActor.asInstanceOf[AbstractTypeDefinition].setKevScriptEngineFactory(kevScriptEngine)
  }

  override def stop() {
    if(groupActor == null){
      return
    }
    if (groupActor.getIsStarted) {
      groupActor.kInstanceStop(null)
      println("Stopping => " + instanceName)
    }
    groupActor = null
  }

  def getKInstance : KInstance = groupActor

}
