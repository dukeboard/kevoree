/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kevoree.platform.android.boot.kcl;

import android.util.Log;
import dalvik.system.BaseDexClassLoader;
import dalvik.system.DexClassLoader;
import dalvik.system.DexFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

/**
 * Created with IntelliJ IDEA.
 * User: duke
 * Date: 29/02/12
 * Time: 18:19
 */
public class TinyKCLDexClassLoader3 extends ClassLoader {


    private ClassLoader clusterCL = null;

    DexFile dexF = null;
    byte[] buf = new byte[1024];

    public TinyKCLDexClassLoader(String dexPath, String dexOutputDir, String libPath,
                                 ClassLoader parent, ClassLoader clusterCL) {
        super(parent);
        this.clusterCL = clusterCL;
        try {
            Log.i("u", dexPath);

            File zipFile = new File(dexPath.replace(".dex", ".zip"));
            if (!zipFile.exists()) {
                ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));
                FileInputStream in = new FileInputStream(dexPath);
                out.putNextEntry(new ZipEntry("classes.dex"));
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                // Complete the entry
                out.closeEntry();
                in.close();
                out.close();
            }
            dexF = DexFile.loadDex(zipFile.getAbsolutePath(), dexOutputDir, 0);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public Class internalLoad(String clazzName) throws ClassNotFoundException {
        return dexF.loadClass(clazzName, this);
    }

    @Override
    public Class<?> loadClass(String s) throws ClassNotFoundException {
        return clusterCL.loadClass(s);
    }

    @Override
    protected URL findResource(String name) {
        return null;
    }

}
